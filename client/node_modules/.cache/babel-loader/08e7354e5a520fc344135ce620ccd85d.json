{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yashs\\\\Desktop\\\\Computer Science\\\\Web Development\\\\Projects\\\\Hackethons\\\\EPIC TVS\\\\EZ Invoicing\\\\client\\\\src\\\\components\\\\transaction\\\\TransactionStatus.js\";\nimport React, { Component } from 'react';\nimport { createDfuseClient } from \"@dfuse/client\";\nimport { getTransactionStatusQuery } from '../../utils/DfuseUtils';\nimport './transactionstatus.scss';\nconst ETHQ_ENDPOINT = process.env.REACT_APP_ETHQ_ENDPOINT;\nexport default class TransactionStatus extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getTransactionStatus = () => {\n      const {\n        transaction_hash\n      } = this.props;\n      const client = createDfuseClient({\n        apiKey: process.env.REACT_APP_DFUSE_API_KEY,\n        network: process.env.REACT_APP_DFUSE_NETWORK\n      });\n      const self = this;\n\n      async function subscribeUpdate(txId, self) {\n        const txQuery = getTransactionStatusQuery(txId);\n        const stream = await client.graphql(txQuery, message => {\n          if (message.type === \"data\") {\n            let currentTransactionSteps = self.state.transactionSteps;\n            currentTransactionSteps.push(message.data.transactionLifecycle);\n            self.setState({\n              transactionSteps: currentTransactionSteps\n            });\n\n            if (message.data.transactionLifecycle.transitionName === 'CONFIRMED') {\n              let transitionConfirmations = message.data.transactionLifecycle.transition.confirmations;\n\n              if (transitionConfirmations >= 16) {\n                stream.close();\n              }\n            }\n          }\n        });\n        await stream.join();\n      }\n\n      subscribeUpdate(transaction_hash, self);\n    };\n\n    this.hideOuterContainer = () => {\n      console.log(\"hide container\");\n    };\n\n    this.state = {\n      walletAddress: '',\n      transactionSteps: [],\n      containerVisibleToggle: 'display: block'\n    };\n  }\n\n  componentWillMount() {\n    const {\n      walletAddress,\n      dfuseApiKey\n    } = this.props;\n    this.getTransactionStatus();\n  }\n\n  render() {\n    const {\n      transactionSteps\n    } = this.state;\n    let styles = {\n      containerStyle: {\n        'background': '#f5f5f5',\n        'marginTop': '20px'\n      }\n    };\n    let transactionFromAddress = \"\";\n    let transactionToAddress = \"\";\n    let transactionEtherValue = React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    });\n    let currentStep = React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    });\n    let transactionFromDisplay = React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    });\n    let transactionToDisplay = React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    });\n\n    if (transactionSteps.length > 0) {\n      let lastTransition = transactionSteps[transactionSteps.length - 1];\n      let numConfirmations = \"\";\n      let numConfirmationBlock = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      });\n\n      if (lastTransition.transitionName === 'CONFIRMED') {\n        numConfirmations = lastTransition.transition.confirmations;\n        numConfirmationBlock = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, numConfirmations, \" Confirmations\");\n      }\n\n      currentStep = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, lastTransition.transitionName, numConfirmationBlock);\n      let firstStep = null;\n      transactionSteps.forEach(function (ts) {\n        if (ts.transition && ts.transition.transaction) {\n          firstStep = ts;\n        }\n      });\n\n      if (firstStep) {\n        transactionFromAddress = firstStep.transition.transaction.from;\n        transactionToAddress = firstStep.transition.transaction.to;\n        transactionEtherValue = firstStep.transition.transaction.value;\n        transactionFromDisplay = transactionFromAddress.substr(0, 5) + \"....\" + transactionFromAddress.substr(transactionFromAddress.length - 6, transactionFromAddress.length - 1);\n        transactionFromDisplay = React.createElement(\"a\", {\n          href: `${ETHQ_ENDPOINT}/search?q=(from:${transactionFromAddress}%20OR%20to:${transactionFromAddress})`,\n          target: \"_blank\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, transactionFromDisplay);\n        transactionToDisplay = transactionToAddress.substr(0, 5) + \"....\" + transactionToAddress.substr(transactionToAddress.length - 6, transactionToAddress.length - 1);\n        transactionToDisplay = React.createElement(\"a\", {\n          href: `${ETHQ_ENDPOINT}/search?q=(from:${transactionToAddress}%20OR%20to:${transactionToAddress})`,\n          target: \"_blank\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, transactionToDisplay);\n      }\n    }\n\n    let steps = [];\n    transactionSteps.forEach(function (item, idx) {\n      if (idx === 0) {\n        let currentStepList = [{\n          'label': item.previousState\n        }];\n\n        if (item.currentState !== item.previousState) {\n          currentStepList.push({\n            'label': item.currentState\n          });\n        }\n\n        steps = steps.concat(currentStepList);\n      } else {\n        let currentStepList = [];\n\n        if (item.previousState !== transactionSteps[idx - 1].currentState) {\n          currentStepList.push({\n            'label': item.previousState\n          });\n        }\n\n        if (item.currentState !== item.previousState) {\n          currentStepList.push({\n            'label': item.currentState\n          });\n        }\n\n        steps = steps.concat(currentStepList);\n      }\n    });\n    let pendingTransactionSteps = React.createElement(\"div\", {\n      className: \"progress-bar-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, steps.map(function (item, idx) {\n      let stepperStep = idx + 1;\n      let joiner = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      });\n\n      if (idx < steps.length - 1) {\n        joiner = React.createElement(\"div\", {\n          className: \"stepper-line\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        });\n      }\n\n      let itemLabel = (item.label[0] + item.label.substr(1, item.label.length - 1).toLowerCase()).replace(\"_\", \" \");\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"stepper-circle-container\",\n        key: \"tx-confirmation-\" + idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"stepper-circle stepper-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, stepperStep), itemLabel), joiner);\n    }));\n    return React.createElement(\"div\", {\n      className: \"pending-transaction-outer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: styles.containerStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"step-header-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"New Transaction received\"), React.createElement(\"div\", {\n      className: \"hide-container-check\",\n      onClick: this.hideOuterContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"\\xD7\")), React.createElement(\"div\", {\n      className: \"stepper-body-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"status-cell-meta\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cell-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cell-data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, transactionFromDisplay), React.createElement(\"div\", {\n      className: \"cell-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"From\")), React.createElement(\"div\", {\n      className: \"cell-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cell-data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, transactionToDisplay), React.createElement(\"div\", {\n      className: \"cell-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"To\")), React.createElement(\"div\", {\n      className: \"cell-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cell-data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, transactionEtherValue, \" Ether\"), React.createElement(\"div\", {\n      className: \"cell-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Value\"))), React.createElement(\"div\", {\n      className: \"current-status-stepper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"status-line\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, currentStep), React.createElement(\"div\", {\n      className: \"status-step\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, pendingTransactionSteps))))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/yashs/Desktop/Computer Science/Web Development/Projects/Hackethons/EPIC TVS/EZ Invoicing/client/src/components/transaction/TransactionStatus.js"],"names":["React","Component","createDfuseClient","getTransactionStatusQuery","ETHQ_ENDPOINT","process","env","REACT_APP_ETHQ_ENDPOINT","TransactionStatus","constructor","props","getTransactionStatus","transaction_hash","client","apiKey","REACT_APP_DFUSE_API_KEY","network","REACT_APP_DFUSE_NETWORK","self","subscribeUpdate","txId","txQuery","stream","graphql","message","type","currentTransactionSteps","state","transactionSteps","push","data","transactionLifecycle","setState","transitionName","transitionConfirmations","transition","confirmations","close","join","hideOuterContainer","console","log","walletAddress","containerVisibleToggle","componentWillMount","dfuseApiKey","render","styles","containerStyle","transactionFromAddress","transactionToAddress","transactionEtherValue","currentStep","transactionFromDisplay","transactionToDisplay","length","lastTransition","numConfirmations","numConfirmationBlock","firstStep","forEach","ts","transaction","from","to","value","substr","steps","item","idx","currentStepList","previousState","currentState","concat","pendingTransactionSteps","map","stepperStep","joiner","itemLabel","label","toLowerCase","replace"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { createDfuseClient } from \"@dfuse/client\"\nimport { getTransactionStatusQuery } from '../../utils/DfuseUtils';\nimport './transactionstatus.scss';\nconst ETHQ_ENDPOINT = process.env.REACT_APP_ETHQ_ENDPOINT;\n\nexport default class TransactionStatus extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { walletAddress: '', transactionSteps: [], containerVisibleToggle: 'display: block' };\n  }\n  componentWillMount() {\n    const { walletAddress, dfuseApiKey } = this.props;\n    this.getTransactionStatus();\n  }\n\n  getTransactionStatus = () => {\n    const { transaction_hash } = this.props;\n\n    const client = createDfuseClient({\n      apiKey: process.env.REACT_APP_DFUSE_API_KEY,\n      network: process.env.REACT_APP_DFUSE_NETWORK\n    });\n\n    const self = this;\n\n    async function subscribeUpdate(txId, self) {\n      const txQuery = getTransactionStatusQuery(txId);\n      const stream = await client.graphql(txQuery, (message) => {\n        if (message.type === \"data\") {\n          let currentTransactionSteps = self.state.transactionSteps;\n          currentTransactionSteps.push(message.data.transactionLifecycle);\n\n          self.setState({ transactionSteps: currentTransactionSteps });\n\n          if (message.data.transactionLifecycle.transitionName === 'CONFIRMED') {\n            let transitionConfirmations = message.data.transactionLifecycle.transition.confirmations;\n            if (transitionConfirmations >= 16) {\n              stream.close();\n            }\n          }\n        }\n      })\n      await stream.join();\n    }\n    subscribeUpdate(transaction_hash, self);\n\n  }\n\n  hideOuterContainer = () => {\n    console.log(\"hide container\");\n  }\n  render() {\n    const { transactionSteps } = this.state;\n\n    let styles = {\n      containerStyle: {\n        'background': '#f5f5f5',\n        'marginTop': '20px',\n      }\n    }\n    let transactionFromAddress = \"\";\n    let transactionToAddress = \"\";\n    let transactionEtherValue = <span/>;\n    let currentStep = <span/>;\n    let transactionFromDisplay = <span/>;\n    let transactionToDisplay = <span/>;\n\n    if (transactionSteps.length > 0) {\n      let lastTransition = transactionSteps[transactionSteps.length - 1];\n      let numConfirmations = \"\";\n      let numConfirmationBlock = <span/>;\n\n\n      if (lastTransition.transitionName === 'CONFIRMED') {\n        numConfirmations = lastTransition.transition.confirmations;\n        numConfirmationBlock = <div>{numConfirmations} Confirmations</div>\n      }\n      currentStep =\n        (<div>\n        {lastTransition.transitionName}\n        {numConfirmationBlock}\n      </div>)\n      let firstStep = null;\n      transactionSteps.forEach(function(ts) {\n        if (ts.transition && ts.transition.transaction) {\n          firstStep = ts;\n        }\n      });\n      if (firstStep) {\n        transactionFromAddress = firstStep.transition.transaction.from;\n        transactionToAddress = firstStep.transition.transaction.to;\n        transactionEtherValue = firstStep.transition.transaction.value;\n\n        transactionFromDisplay = transactionFromAddress.substr(0, 5) + \"....\" + transactionFromAddress.substr(transactionFromAddress.length - 6, transactionFromAddress.length - 1);\n        transactionFromDisplay = <a href={`${ETHQ_ENDPOINT}/search?q=(from:${transactionFromAddress}%20OR%20to:${transactionFromAddress})`} target=\"_blank\">{transactionFromDisplay}</a>;\n\n        transactionToDisplay = transactionToAddress.substr(0, 5) + \"....\" + transactionToAddress.substr(transactionToAddress.length - 6, transactionToAddress.length - 1);\n        transactionToDisplay = <a href={`${ETHQ_ENDPOINT}/search?q=(from:${transactionToAddress}%20OR%20to:${transactionToAddress})`} target=\"_blank\">{transactionToDisplay}</a>;\n\n      }\n    }\n\n    let steps = [];\n    transactionSteps.forEach(function(item, idx) {\n      if (idx === 0) {\n        let currentStepList = [{ 'label': item.previousState }]\n\n        if (item.currentState !== item.previousState) {\n          currentStepList.push({ 'label': item.currentState })\n        }\n        steps = steps.concat(currentStepList);\n      }\n      else {\n        let currentStepList = [];\n        if (item.previousState !== transactionSteps[idx - 1].currentState) {\n          currentStepList.push({ 'label': item.previousState })\n        }\n        if (item.currentState !== item.previousState) {\n          currentStepList.push({ 'label': item.currentState })\n        }\n        steps = steps.concat(currentStepList);\n      }\n    });\n\n    let pendingTransactionSteps = (\n\n\n      <div className=\"progress-bar-container\">\n        {steps.map(function(item, idx){\n        let stepperStep = idx + 1;\n        let joiner = <span/>;\n        if (idx < steps.length - 1) {\n          joiner =  <div className=\"stepper-line\"></div>\n        }\n        let itemLabel = (item.label[0] + item.label.substr(1, item.label.length - 1).toLowerCase()).replace(\"_\", \" \");\n        return (\n          <span>\n              <div className=\"stepper-circle-container\" key={\"tx-confirmation-\"+idx}>\n                <div className=\"stepper-circle stepper-left\">\n                  {stepperStep}\n                </div>\n                {itemLabel}\n              </div>\n              {joiner}\n          </span>\n        )\n        })}\n        </div>\n\n\n\n    )\n    return (\n      <div className=\"pending-transaction-outer-container\">\n      \n      <div>\n      <div style={styles.containerStyle}>\n          \n          <div className=\"step-header-container\">\n            <div>\n              New Transaction received\n            </div>\n            <div className=\"hide-container-check\" onClick={this.hideOuterContainer}>&#xd7;</div>\n          </div>\n          <div className=\"stepper-body-container\">\n          <div className=\"status-cell-meta\">\n            <div className=\"cell-container\">\n              <div className=\"cell-data\">\n                {transactionFromDisplay}\n              </div>\n              <div className=\"cell-label\">\n                From\n              </div>\n            </div>\n            <div className=\"cell-container\">\n              <div className=\"cell-data\">\n                {transactionToDisplay}\n              </div>\n              <div className=\"cell-label\">\n                To\n              </div>\n            </div>\n            <div className=\"cell-container\">\n              <div className=\"cell-data\">\n                {transactionEtherValue} Ether\n              </div>\n              <div className=\"cell-label\">\n                Value\n              </div>\n            </div>\n            \n          </div>\n          <div className=\"current-status-stepper\">\n            <div className=\"status-line\">\n              {currentStep}\n            </div>\n            <div className=\"status-step\">\n              { pendingTransactionSteps } \n            </div>\n          </div>\n      </div>\n      </div>\n      </div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}