{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yashs\\\\Desktop\\\\Computer Science\\\\Web Development\\\\Projects\\\\Hackethons\\\\EPIC TVS\\\\Streamworks-master\\\\client\\\\src\\\\components\\\\user\\\\UserView.js\";\nimport React, { Component } from 'react';\nimport CreateInvoice from './CreateInvoice';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport { isNonEmptyArray } from '../../utils/ObjectUtils';\nimport { checkIfPaymentStatusUpdate } from '../../utils/ObjectUtils';\nimport UserInvoiceList from './UserInvoiceList';\nimport TransactionStatus from '../transaction/TransactionStatus';\nimport './user.scss';\nexport default class UserView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.listenForInvoicePayments = () => {\n      const self = this;\n      this.timer = setInterval(function () {\n        self.props.getPreviousInvoices();\n      }, 1000);\n    };\n\n    this.showDialog = () => {\n      this.setState({\n        dialogVisible: true\n      });\n    };\n\n    this.handleCloseDialog = () => {\n      this.setState({\n        dialogVisible: false\n      });\n    };\n\n    this.state = {\n      dialogVisible: false,\n      pendingTransactions: []\n    };\n  }\n\n  componentWillMount() {\n    this.props.getPreviousInvoices();\n    this.listenForInvoicePayments();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      user: {\n        previousInvoices,\n        success\n      }\n    } = nextProps; // console.log(success);\n\n    if (previousInvoices && this.props.user.previousInvoices.length > 0) {\n      let invoiceDiff = checkIfPaymentStatusUpdate(previousInvoices, this.props.user.previousInvoices);\n\n      if (isNonEmptyArray(invoiceDiff)) {\n        let currentPendingTransactions = this.state.pendingTransactions;\n        currentPendingTransactions.push(invoiceDiff);\n        this.setState({\n          pendingTransactions: currentPendingTransactions\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      dialogVisible,\n      pendingTransactions\n    } = this.state;\n    const {\n      user\n    } = this.props;\n    let pendingTransactionList = React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n\n    if (isNonEmptyArray(pendingTransactions)) {\n      pendingTransactionList = pendingTransactions.map(function (item, idx) {\n        return React.createElement(TransactionStatus, {\n          key: `${item}+${idx}`,\n          transaction_hash: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        });\n      });\n    }\n\n    let invoiceList = React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    });\n\n    if (user.previousInvoices.length > 0) {\n      invoiceList = React.createElement(UserInvoiceList, {\n        previousInvoices: user.previousInvoices,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n    } else {\n      invoiceList = React.createElement(\"div\", {\n        className: \"empty-list-container empty-user-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"You haven't created any invoices yet.\");\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, pendingTransactionList, React.createElement(CreateInvoice, {\n      dialogVisible: dialogVisible,\n      handleCloseDialog: this.handleCloseDialog,\n      submitInvoice: this.props.submitInvoice,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(Row, {\n      className: \"add-invoice-btn-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.showDialog,\n      className: \"add-invoice-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Submit New Invoice\")), React.createElement(Col, {\n      lg: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, invoiceList)));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/yashs/Desktop/Computer Science/Web Development/Projects/Hackethons/EPIC TVS/Streamworks-master/client/src/components/user/UserView.js"],"names":["React","Component","CreateInvoice","Container","Row","Col","Button","isNonEmptyArray","checkIfPaymentStatusUpdate","UserInvoiceList","TransactionStatus","UserView","constructor","props","listenForInvoicePayments","self","timer","setInterval","getPreviousInvoices","showDialog","setState","dialogVisible","handleCloseDialog","state","pendingTransactions","componentWillMount","componentWillUnmount","clearInterval","componentWillReceiveProps","nextProps","user","previousInvoices","success","length","invoiceDiff","currentPendingTransactions","push","render","pendingTransactionList","map","item","idx","invoiceList","submitInvoice"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport CreateInvoice from './CreateInvoice';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport { isNonEmptyArray } from '../../utils/ObjectUtils';\nimport { checkIfPaymentStatusUpdate } from '../../utils/ObjectUtils';\nimport UserInvoiceList from './UserInvoiceList';\nimport TransactionStatus from '../transaction/TransactionStatus';\nimport './user.scss';\n\nexport default class UserView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { dialogVisible: false, pendingTransactions: [] };\n  }\n  componentWillMount() {\n    this.props.getPreviousInvoices();\n\n    this.listenForInvoicePayments();\n  }\n\n\n\n  listenForInvoicePayments = () => {\n    const self = this;\n    this.timer = setInterval(function() {\n      self.props.getPreviousInvoices();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n  componentWillReceiveProps(nextProps) {\n    const { user: { previousInvoices , success} } = nextProps;\n    // console.log(success);\n    if (previousInvoices && this.props.user.previousInvoices.length > 0) {\n      let invoiceDiff = checkIfPaymentStatusUpdate(previousInvoices, this.props.user.previousInvoices);\n      if (isNonEmptyArray(invoiceDiff)) {\n        let currentPendingTransactions = this.state.pendingTransactions;\n        currentPendingTransactions.push(invoiceDiff);\n        this.setState({ pendingTransactions: currentPendingTransactions })\n      }\n    }\n  }\n\n  showDialog = () => {\n    this.setState({ dialogVisible: true });\n  }\n\n  handleCloseDialog = () => {\n    this.setState({ dialogVisible: false });\n  }\n\n  render() {\n    const { dialogVisible, pendingTransactions } = this.state;\n    const { user } = this.props;\n    let pendingTransactionList = <span/>;\n    if (isNonEmptyArray(pendingTransactions)) {\n      pendingTransactionList =\n        pendingTransactions.map(function(item, idx) {\n          return <TransactionStatus key={`${item}+${idx}`} transaction_hash={item}/>;\n        });\n    }\n\n    let invoiceList = <span/>;\n    if (user.previousInvoices.length > 0) {\n      invoiceList = <UserInvoiceList previousInvoices={user.previousInvoices}/>;\n    }\n    else {\n      invoiceList = <div className=\"empty-list-container empty-user-list\">You haven't created any invoices yet.</div>\n    }\n    return (\n      <Container>\n      \n      {pendingTransactionList}\n      <CreateInvoice dialogVisible={dialogVisible} handleCloseDialog={this.handleCloseDialog} submitInvoice={this.props.submitInvoice}/>\n      <Row className=\"add-invoice-btn-row\">\n        <Col lg={3}>\n        <Button onClick={this.showDialog} className=\"add-invoice-btn\">Submit New Invoice</Button>\n        </Col>\n        <Col lg={9}>\n        \n        </Col>\n      </Row>\n      <Row> \n        <Col lg={12}>\n          {invoiceList}\n        </Col>\n      </Row>\n      </Container>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}