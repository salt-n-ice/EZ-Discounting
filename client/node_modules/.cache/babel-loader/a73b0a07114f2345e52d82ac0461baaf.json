{"ast":null,"code":"const {\n  createDfuseClient,\n  waitFor\n} = require(\"@dfuse/client\");\n\nmodule.exports = {\n  getTransactionStatusQuery(txId) {\n    const client = createDfuseClient({\n      apiKey: process.env.REACT_APP_DFUSE_API_KEY,\n      network: process.env.REACT_APP_DFUSE_NETWORK\n    });\n    const txHashString = `hash: \"${txId}\"`;\n    const txQuery = `subscription {\n        transactionLifecycle(${txHashString}){\n        previousState\n        currentState\n        transitionName\n        transition {\n            __typename\n\n            ... on TrxTransitionInit {\n                transaction {\n                    ...TransactionFragment\n                }\n                blockHeader {\n                    ...BlockHeaderFragment\n                }\n                trace {\n                    ...TransactionTraceFragment\n                }\n                confirmations\n                replacedById\n            }\n\n            ...on TrxTransitionPooled {\n                transaction {\n                    ...TransactionFragment\n                }\n            }\n\n            ...on TrxTransitionMined {\n                blockHeader {\n                    ...BlockHeaderFragment\n                }\n                trace {\n                    ...TransactionTraceFragment\n                }\n                \n            }\n\n            ...on TrxTransitionForked {\n                transaction {\n                    ...TransactionFragment\n                }\n            }\n\n            ...on TrxTransitionConfirmed {\n                confirmations\n            }\n\n            ...on TrxTransitionReplaced {\n                replacedById\n            }\n\n            }\n        }\n    }\n    \n    fragment TransactionFragment on Transaction {\n        hash\n        from\n        to\n        nonce\n        gasPrice\n        gasLimit\n        value\n        inputData\n        signature {\n            v\n            s\n            r\n        }\n    }\n    \n    fragment TransactionTraceFragment on TransactionTrace {\n        hash\n        from\n        to\n        nonce\n        gasPrice\n        gasLimit\n        value\n        inputData\n        signature {\n            v\n            s\n            r\n        }\n        cumulativeGasUsed\n        publicKey\n        index\n        create\n        outcome\n    }\n    \n    fragment BlockHeaderFragment on BlockHeader {\n        parentHash\n        unclesHash\n        coinbase\n        stateRoot\n        transactionsRoot\n        receiptRoot\n        logsBloom\n        difficulty\n        number\n        gasLimit\n        gasUsed\n        timestamp\n        extraData\n        mixHash\n        nonce\n        hash\n    }`;\n    return txQuery;\n  },\n\n  searchWalletHistory: function (walletAddress, type) {\n    const client = createDfuseClient({\n      apiKey: process.env.REACT_APP_DFUSE_API_KEY,\n      network: process.env.REACT_APP_DFUSE_NETWORK\n    });\n\n    if (!type) {\n      type = 'from';\n    }\n\n    const query = `${type}: ${walletAddress}`;\n    const txQuery = `{\n          searchTransactions(indexName:CALLS query: \"${query}\", limit: 10, sort: DESC) {\n            edges { \n            node {\n      value(encoding:ETHER)\n      hash\n      nonce\n      gasLimit\n      gasUsed\n      gasPrice(encoding:WEI)\n      to\n      block {\n        number\n        hash\n        header {\n          timestamp\n        }\n      }\n      flatCalls {\n        index\n        depth\n        parentIndex\n        callType\n        from\n        to\n        value(encoding:WEI)\n        gasConsumed\n        inputData\n        returnData\n        logs {\n          address\n          topics\n          data\n        }\n        balanceChanges{\n          reason\n          address\n          oldValue(encoding:WEI)\n          newValue\n        }\n      }\n    } } \n          }\n        }`;\n    return client.graphql(txQuery).then(function (dataResponse) {\n      return dataResponse;\n    }).catch(function (err) {\n      throw err;\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/yashs/Desktop/Computer Science/Web Development/Projects/Hackethons/EPIC TVS/Streamworks-master/client/src/utils/DfuseUtils.js"],"names":["createDfuseClient","waitFor","require","module","exports","getTransactionStatusQuery","txId","client","apiKey","process","env","REACT_APP_DFUSE_API_KEY","network","REACT_APP_DFUSE_NETWORK","txHashString","txQuery","searchWalletHistory","walletAddress","type","query","graphql","then","dataResponse","catch","err"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,iBAAF;AAAqBC,EAAAA;AAArB,IAAiCC,OAAO,CAAC,eAAD,CAA9C;;AAIAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,yBAAyB,CAACC,IAAD,EAAO;AAC5B,UAAMC,MAAM,GAAGP,iBAAiB,CAAC;AAC7BQ,MAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,uBADS;AAE7BC,MAAAA,OAAO,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFQ,KAAD,CAAhC;AAKA,UAAMC,YAAY,GAAI,UAASR,IAAK,GAApC;AAEA,UAAMS,OAAO,GAAI;+BACMD,YAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MADpC;AA+GA,WAAOC,OAAP;AACH,GAzHY;;AA2HbC,EAAAA,mBAAmB,EAAE,UAASC,aAAT,EAAwBC,IAAxB,EAA8B;AAC/C,UAAMX,MAAM,GAAGP,iBAAiB,CAAC;AAC7BQ,MAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,uBADS;AAE7BC,MAAAA,OAAO,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFQ,KAAD,CAAhC;;AAKA,QAAI,CAACK,IAAL,EAAW;AACPA,MAAAA,IAAI,GAAG,MAAP;AACH;;AAED,UAAMC,KAAK,GAAI,GAAED,IAAK,KAAID,aAAc,EAAxC;AACA,UAAMF,OAAO,GAAI;uDAC8BI,KAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UADrD;AA4CA,WAAOZ,MAAM,CAACa,OAAP,CAAeL,OAAf,EAAwBM,IAAxB,CAA6B,UAASC,YAAT,EAAuB;AACvD,aAAOA,YAAP;AACH,KAFM,EAEJC,KAFI,CAEE,UAASC,GAAT,EAAc;AACnB,YAAOA,GAAP;AACH,KAJM,CAAP;AAKH;AAvLY,CAAjB","sourcesContent":["const { createDfuseClient, waitFor } = require(\"@dfuse/client\")\n\n\n\nmodule.exports = {\n    getTransactionStatusQuery(txId) {\n        const client = createDfuseClient({\n            apiKey: process.env.REACT_APP_DFUSE_API_KEY,\n            network: process.env.REACT_APP_DFUSE_NETWORK\n        });\n\n        const txHashString = `hash: \"${txId}\"`;\n\n        const txQuery = `subscription {\n        transactionLifecycle(${txHashString}){\n        previousState\n        currentState\n        transitionName\n        transition {\n            __typename\n\n            ... on TrxTransitionInit {\n                transaction {\n                    ...TransactionFragment\n                }\n                blockHeader {\n                    ...BlockHeaderFragment\n                }\n                trace {\n                    ...TransactionTraceFragment\n                }\n                confirmations\n                replacedById\n            }\n\n            ...on TrxTransitionPooled {\n                transaction {\n                    ...TransactionFragment\n                }\n            }\n\n            ...on TrxTransitionMined {\n                blockHeader {\n                    ...BlockHeaderFragment\n                }\n                trace {\n                    ...TransactionTraceFragment\n                }\n                \n            }\n\n            ...on TrxTransitionForked {\n                transaction {\n                    ...TransactionFragment\n                }\n            }\n\n            ...on TrxTransitionConfirmed {\n                confirmations\n            }\n\n            ...on TrxTransitionReplaced {\n                replacedById\n            }\n\n            }\n        }\n    }\n    \n    fragment TransactionFragment on Transaction {\n        hash\n        from\n        to\n        nonce\n        gasPrice\n        gasLimit\n        value\n        inputData\n        signature {\n            v\n            s\n            r\n        }\n    }\n    \n    fragment TransactionTraceFragment on TransactionTrace {\n        hash\n        from\n        to\n        nonce\n        gasPrice\n        gasLimit\n        value\n        inputData\n        signature {\n            v\n            s\n            r\n        }\n        cumulativeGasUsed\n        publicKey\n        index\n        create\n        outcome\n    }\n    \n    fragment BlockHeaderFragment on BlockHeader {\n        parentHash\n        unclesHash\n        coinbase\n        stateRoot\n        transactionsRoot\n        receiptRoot\n        logsBloom\n        difficulty\n        number\n        gasLimit\n        gasUsed\n        timestamp\n        extraData\n        mixHash\n        nonce\n        hash\n    }`;\n        return txQuery;\n    },\n\n    searchWalletHistory: function(walletAddress, type) {\n        const client = createDfuseClient({\n            apiKey: process.env.REACT_APP_DFUSE_API_KEY,\n            network: process.env.REACT_APP_DFUSE_NETWORK\n        });\n\n        if (!type) {\n            type = 'from'\n        }\n\n        const query = `${type}: ${walletAddress}`;\n        const txQuery = `{\n          searchTransactions(indexName:CALLS query: \"${query}\", limit: 10, sort: DESC) {\n            edges { \n            node {\n      value(encoding:ETHER)\n      hash\n      nonce\n      gasLimit\n      gasUsed\n      gasPrice(encoding:WEI)\n      to\n      block {\n        number\n        hash\n        header {\n          timestamp\n        }\n      }\n      flatCalls {\n        index\n        depth\n        parentIndex\n        callType\n        from\n        to\n        value(encoding:WEI)\n        gasConsumed\n        inputData\n        returnData\n        logs {\n          address\n          topics\n          data\n        }\n        balanceChanges{\n          reason\n          address\n          oldValue(encoding:WEI)\n          newValue\n        }\n      }\n    } } \n          }\n        }`;\n        return client.graphql(txQuery).then(function(dataResponse) {\n            return dataResponse;\n        }).catch(function(err) {\n            throw (err);\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}